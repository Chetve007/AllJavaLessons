Паттерн Builder является паттерном создания объектов (creational pattern). 
Суть его заключается в том, чтобы отделить процесс создания некоторого сложного объекта от его представления. 
Таким образом, можно получать различные представления объекта, используя один и тот же "технологический" процесс.


Паттерн проектирования Strategy известен также под названием Policy. 
Суть его состоит в том, чтобы создать несколько моделей поведения (стратегий) для одного объекта и вынести их в отдельные классы.
Вот ряд преимуществ данного паттерна:

позволяет выбирать модель поведения объекта динамически;
упрощает процесс добавления новых стратегий;
является альтернативой наследованию;
избавляет от множества условий (if, case);
делает еще много всего.

Если вам понятно, что значит каждый из этих пунктов (особенно 5-ый), переходите сразу к примеру на Java. 
А мы пока рассмотрим эти пункты немного подробнее.
Инкапсулирование стратегии в отдельном классе позволяет менять поведение объекта динамически. 
Очевидно, что для добавления новой стратегии нужно создать независимый класс и реализовать необходимые функции. 
Аналогично, для изменения или удаления стратегии опять же будет затронут только один класс.
Для выбора модели поведения часто используют наследование. 
Имея некоторый объект, мы создаем новый экземпляр подкласса этого объекта и присваиваем его самому объекту. 
При использовании паттерна Startegy, достаточно переключится на интересующую нас стратегию.
Если поведение объекта описывается несколькими методами, паттерн Strategy уменьшит кол-во условий в коде программы. 
Условный оператор понадобится нам не более одного раза для выбора определенной стратегии.
Использовать паттерн Strategy на практике можно, например, при выборе алгоритма шифрования: